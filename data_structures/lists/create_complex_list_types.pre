declarationTargetPath = changeFileName(__file__, "complex_lists.pxd")
declarationSourcePath = changeFileName(__file__, "__complex_list_declaration.src")

implementationTargetPath = changeFileName(__file__, "complex_lists.pyx")
implementationSourcePath = changeFileName(__file__, "__complex_list_implementation.src")

conversionSourcePath = changeFileName(__file__, "__complex_list_converters.src")

types = [dict(BASELISTTYPE = "FloatList",
             LISTNAME = "VectorList",
             AMOUNT = "3",
             APPEND = "appendVector",
             GETITEM = "getVector")]

# Create Declaration File
#####################################################

if dependenciesChanged(declarationTargetPath, dependencies = [declarationSourcePath]):
    declaration = readFile(declarationSourcePath)

    parts = []
    parts.append("from . base_lists cimport FloatList")

    for typeData in types:
        code = multiReplace(declaration, **typeData)
        parts.append(code)

    writeFile(declarationTargetPath, "\n\n".join(parts))

# Create Implementation File
#####################################################

if dependenciesChanged(implementationTargetPath, dependencies = [implementationSourcePath, conversionSourcePath]):
    implementation = readFile(implementationSourcePath)

    parts = []
    parts.append(readFile(conversionSourcePath))

    for typeData in types:
        code = multiReplace(implementation, **typeData)
        parts.append(code)

    writeFile(implementationTargetPath, "\n\n".join(parts))
