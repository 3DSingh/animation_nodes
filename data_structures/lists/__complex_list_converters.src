from mathutils import Vector, Matrix
from . base_lists cimport FloatList, UIntegerList
from ... math cimport toVector3, toPyVector, toMatrix4, toPyMatrix, Vector3, Matrix4


# Vector3DList
############################################

cdef int elementToArrayOfVector3DList(vector, float* array) except -1:
    '''The array has to be initialized with a length of 3.
    Returns 0 on success.'''
    if len(vector) != 3: return -2
    toVector3(<Vector3*>array, vector)
    return 0

cdef getElementFromVector3DList(Vector3DList myList, long index):
    '''Index has to be valid at this point!'''
    return toPyVector(<Vector3*>myList.base.data + index)


# Matrix4x4List
############################################

cdef int elementToArrayOfMatrix4x4List(matrix, float* array) except -1:
    '''The array has to be initialized with a length of 16.
    Returns 0 on success.'''
    if len(matrix.col) != 4 or len(matrix.row) != 4: return -2
    toMatrix4(<Matrix4*>array, matrix)
    return 0

cdef getElementFromMatrix4x4List(Matrix4x4List myList, long index):
    '''Index has to be valid at this point!'''
    return toPyMatrix(<Matrix4*>myList.base.data + index)


# EdgeIndicesList
############################################

cdef int elementToArrayOfEdgeIndicesList(edge, unsigned int* array) except -1:
    '''The array has to be initialized with a length of 2.
    Returns 0 on success.'''
    if len(edge) != 2: return -2
    array[0] = edge[0]
    array[1] = edge[1]
    return 0

cdef getElementFromEdgeIndicesList(EdgeIndicesList myList, long index):
    '''Index has to be valid at this point!'''
    cdef long i = index * 2
    return (myList.base.data[i + 0], myList.base.data[i + 1])
