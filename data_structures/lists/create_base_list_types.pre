from textwrap import dedent

declarationTargetPath = changeFileName(__file__, "base_lists.pxd")
declarationSourcePath = changeFileName(__file__, "__base_list_declaration.src")

implementationTargetPath = changeFileName(__file__, "base_lists.pyx")
implementationSourcePath = changeFileName(__file__, "__base_list_implementation.src")


# Create Declaration File
#####################################################

if dependenciesChanged(declarationTargetPath, dependencies = [declarationSourcePath]):
    declaration = readFile(declarationSourcePath)

    parts = []
    parts.append("ctypedef fused list_or_tuple:\n    list\n    tuple")

    fusedType = "ctypedef fused numeric_list:\n"
    for listName, _ in baseLists:
        fusedType += "    " + listName + "\n"
    parts.append(fusedType)

    for listName, listType in baseLists:
        code = multiReplace(declaration, LISTNAME = listName, TYPE = listType)
        parts.append(code)

    writeFile(declarationTargetPath, "\n\n".join(parts))


# Create Implementation File
#####################################################

if dependenciesChanged(implementationTargetPath, dependencies = [implementationSourcePath]):
    implementation = readFile(implementationSourcePath)

    parts = []

    for listName, listType in baseLists:
        code = multiReplace(implementation, LISTNAME = listName, TYPE = listType)
        parts.append(code)

    writeFile(implementationTargetPath, "\n\n".join(parts))
