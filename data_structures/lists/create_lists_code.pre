import re

declarationTargetPath = changeFileName(__file__, "lists_test.pxd")
declarationSourcePath = changeFileName(__file__, "__list_declaration.src")

implementationTargetPath = changeFileName(__file__, "lists_test.pyx")
implementationSourcePath = changeFileName(__file__, "__list_implementation.src")
implementationPrefixPath = changeFileName(__file__, "__lists_implementation_prefix.src")

numericLists = [
    ("FloatList", "float"),
    ("DoubleList", "double"),
    ("CharList", "char"),          ("UCharList", "unsigned char"),
    ("LongList", "long"),          ("ULongList", "unsigned long"),
    ("IntegerList", "int"),        ("UIntegerList", "unsigned int"),
    ("ShortList", "short"),        ("UShortList", "unsigned short"),
    ("LongLongList", "long long"), ("ULongLongList", "unsigned long long")
]

lists = []

for listName, dataType in numericLists:
    lists.append(dict(LISTNAME = listName,
                      TYPE = dataType,
                      MEMVIEW = dataType,
                      EQUALS = r"\1 == \2",
                      TRY_CONVERSION_CODE = "target[0] = value",
                      TO_PYOBJECT_CODE = "return value[0]"))

lists.append(dict(LISTNAME = "Vector3DList",
                  TYPE = "Vector3",
                  MEMVIEW = "float",
                  EQUALS = r"\1.x == \2.x and \1.y == \2.y and \1.z == \2.z",
                  TRY_CONVERSION_CODE = "valueToVector3(value, target)",
                  TO_PYOBJECT_CODE = "return toPyVector(value)"))


# Create Declaration File
#####################################################

if dependenciesChanged(declarationTargetPath, dependencies = [declarationSourcePath, implementationPrefixPath, __file__]):
    prefix = readFile(implementationPrefixPath)
    declaration = readFile(declarationSourcePath)

    parts = []
    parts.append(prefix)
    parts.append("ctypedef fused list_or_tuple:\n    list\n    tuple")

    for listData in lists:
        parts.append(multiReplace(declaration,
            LISTNAME = listData["LISTNAME"],
            TYPE = listData["TYPE"],
            MEMVIEW = listData["MEMVIEW"]))

    writeFile(declarationTargetPath, "\n\n".join(parts))


# Create Implementation File
#####################################################

if dependenciesChanged(implementationTargetPath, dependencies = [implementationSourcePath, __file__]):
    implementation = readFile(implementationSourcePath)

    parts = []
    for listData in lists:
        listCode = re.sub("EQUALS\((.*), (.*)\)", "({})".format(listData["EQUALS"]), implementation)
        parts.append(multiReplace(listCode,
           LISTNAME = listData["LISTNAME"],
           TYPE = listData["TYPE"],
           MEMVIEW = listData["MEMVIEW"],
           TRY_CONVERSION_CODE = listData["TRY_CONVERSION_CODE"],
           TO_PYOBJECT_CODE = listData["TO_PYOBJECT_CODE"]))

    writeFile(implementationTargetPath, "\n\n".join(parts))
