##OUTPUT base_lists.pyx

from libc.stdlib cimport malloc, free, realloc
from libc.string cimport memcpy
from libc.math cimport sin
cimport cython


##INSERT __list_implementation.src {'LISTNAME': 'FloatList', 'TYPE' : 'float'}
##INSERT __list_iterator.src {'LISTNAME': 'FloatList', 'TYPE' : 'float'}

##INSERT __list_implementation.src {'LISTNAME': 'DoubleList', 'TYPE' : 'double'}
##INSERT __list_iterator.src {'LISTNAME': 'DoubleList', 'TYPE' : 'double'}


##INSERT __list_implementation.src {'LISTNAME': 'LongLongList', 'TYPE' : 'long long'}
##INSERT __list_iterator.src {'LISTNAME': 'LongLongList', 'TYPE' : 'long long'}


cpdef DoubleList floatListToDoubleList(FloatList floatList):
    cdef DoubleList newList = DoubleList(floatList.length)
    cdef long i
    for i in range(len(floatList)):
        newList.data[i] = floatList.data[i]
    return newList


'''
Lists have to support the following operations:
    myList.append(baseType)
    myList.extend(baseTypeList)
    myList.fill(baseType)
    list.join(*lists)
    list.fromValues(baseTypeList)
    len(myList)                     # __len__
    myList + otherList              # __add__
    myList += otherList             # __iadd__
    myList * x                      # __mul__
    myList[x]  | myList[x:y:z]      # __getitem__
    myList = x | myList[x:y:z] = x  # __setitem__
    x in myList                     # __contains__
'''
