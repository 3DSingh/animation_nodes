Every node is a subclass of:
    bpy.types.Node
    animation_nodes.base_types.node.AnimationNode
    
necessary properties:
    bl_idname - 'an_' + class name
    bl_label - default name of the node
    
optional properties:
    searchTags - list of names which will extend the search box to make the node better findable
    isDetermined - set to True if the node always has the same output with the same input
    
    
Functions:
    Note: Don't create one of the following functions: init, update, copy, free
    use the following instead

    create(self) function:
        has the same purpose as the __init__ function in python
        normally used to create all sockets
        
    edit(self) function:
        is called every time the user changes the node tree

    duplicate(self, sourceNode) function:
        is called when the user copies a node

    delete(self) function:
        is called when the user removes a node
    
    
Each node implements one of the following execution methods:
    
    1. Dictionary Execution:
        This node only has the 'execute' function which has the parameters 'self' and 'inputs'.
        'inputs' is a dictionary in this form: { socket identifier (name) : value, ... }
        The function outputs another dictionary (normally called 'outputs') in the same form.
        Note: each existing output socket identifier has to be a key in there.
        
    For the next two types some preparation is needed. The node has to have a 'inputNames' and 'outputNames' property.
    These can be static or dynamic using the @property decorator.
    Both properties hold a dictionary in this form: { socket identifier : variable name, ... }
    Note: each existing socket must exist in the corresponding dictionary
        
    2. Parameter Execution:
        The 'execute' function has a input parameter for each input socket.
        The parameter names are specified in the 'inputNames' property.
        After doing its work the function always returns the same amount of elements as it has output sockets.
        The outputs have to be in the same order as the sockets.
        
    3. Code Execution:
        This type has no execute function. Instead a function called 'getExecutionCode' returns python code that will be executed later.
        The function has 'self' and 'usedOutputs' (optional) as arguments. 'usedOutputs' is a dictionary of this form: { socket identifier : is linked? }
        The returned code has no default indentation but is allowed to be indented for if statements or similar.
        In the returned code should be the variable names specified in the 'input/outputNames' dictionary.
        Note: the input variables are surrounded by '%' keys while outputs variables have '$' as prefix and suffix.
        The node can also have a 'getModuleList' function which returns a list of module names which should be imported before execution
        